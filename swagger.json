{
  "swagger": "2.0",
  "info": {
    "description": "This is the API Interface definition for HCCC'c Youth and Education Application",
    "version": "1.0.0",
    "title": "HCCC Youth and Education API",
    "contact": {
      "email": "ec_it@livermoretemple.org"
    }
  },
  "host": "livermoretemple.org",
  "basePath": "/yande/api",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Retrieves courses from the catalogue",
        "operationId": "getCourses",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Tags to be used as filter - comma seperated list of tags"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - List of items returned in the response payload",
            "schema": {
              "$ref": "#/definitions/RetrieveCoursesListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Adds a new course to the catalogue",
        "operationId": "addCourse",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CourseObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/CourseObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/courses/{courseId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Retrieves course by Course Id",
        "operationId": "getCourseById",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "string",
            "description": "Id of the course to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/CourseObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/teachers": {
      "get": {
        "tags": [
          "teachers"
        ],
        "summary": "Retrieves list of teachers",
        "operationId": "getTeachers",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - List of items returned in the response payload",
            "schema": {
              "$ref": "#/definitions/RetrieveTeachersListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "teachers"
        ],
        "summary": "Adds a new teacher to the system",
        "operationId": "registerTeacher",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeacherObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/TeacherObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/teachers/{teacherId}": {
      "get": {
        "tags": [
          "teachers"
        ],
        "summary": "Retrieves teacher by teacher Id",
        "operationId": "getTeacherById",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "teacherId",
            "required": true,
            "type": "string",
            "description": "Id of the teacher to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/TeacherObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/indemnities": {
      "get": {
        "tags": [
          "indemnities"
        ],
        "summary": "Retrieves indemnities from the system. ",
        "description": "Only indemnities belonging to the requesting user account will be returned. User Account information is available in the header.",
        "operationId": "getIndemnities",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "familyMemberId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier of the family member"
          },
          {
            "name": "indemnityFormId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier of the Indemnity Form"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - List of items returned in the response payload",
            "schema": {
              "$ref": "#/definitions/RetrieveIndemnitiesListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "description": "If no indemnity is signed for the given indemnityFormId and familyMemberId combination then return 404 - Not Found",
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "indemnities"
        ],
        "summary": "Adds a new indemnity for a student in the system",
        "operationId": "addIndemnity",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndemnityObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/IndemnityObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieves accounts from the system",
        "operationId": "getAccounts",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If a userName is passed in query string, the results will be filtered by accounts user name"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If a phone number is passed in query string, the results will be filtered by accounts mobile number"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If a role is passed in query string, the results will be filtered by roles"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - List of items returned in the response payload",
            "schema": {
              "$ref": "#/definitions/RetrieveAccountsListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/account/{userName}/enrollments": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "Retrieves enrollments from the system.",
        "description": " Only enrollments belonging to the requesting user account will be returned. User Account information is available in the header.",
        "operationId": "getEnrollments",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "userName",
            "required": true,
            "type": "string",
            "description": "Id of the account to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success - List of items returned in the response payload",
            "schema": {
              "$ref": "#/definitions/RetrieveEnrollmentsListResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "enrollments"
        ],
        "summary": "Adds a new enrollment to the system",
        "operationId": "addEnrollment",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "userName",
            "required": true,
            "type": "string",
            "description": "Id of the account to be retrieved"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnrollmentObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Item returned in the response payload",
            "schema": {
              "$ref": "#/definitions/EnrollmentObject"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "description": "Error Object",
      "properties": {
        "errorCode": {
          "description": "Unique Error Code that identifies the error",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Error Messages that describes the error",
          "type": "string"
        }
      }
    },

    "RetrieveCoursesListResponse": {
      "description": "This is the schema of response payload when a list of course information is requested",
      "properties": {
        "courses": {
          "type": "array",
          "description": "List of Courses",
          "items": {
            "$ref": "#/definitions/CourseObject"
          }
        }
      }
    },
    "CourseObject": {
      "description": "Course Object",
      "properties": {
        "courseId": {
          "type": "string",
          "description": "Unique course id"
        },
        "courseName": {
          "type": "string",
          "description": "Unique course id"
        },
        "ageRestrictions": {
          "type": "string",
          "description": "A String describing any age restrictions"
        },
        "courseStartTime": {
          "type": "string",
          "description": "Course start time represented as a string in pacific time in the format hh:mm"
        },
        "courseEndTime": {
          "type": "string",
          "description": "Course end time represented as a string in pacific time in the format hh:mm"
        },
        "courseStartDate": {
          "type": "string",
          "description": "Course start date represented as a string in pacific time in the format yyyy-mm-dd"
        },
        "courseEndDate": {
          "type": "string",
          "description": "Course end date represented as a string in pacific time in the format yyyy-mm-dd"
        },
        "courseDays": {
          "type": "string",
          "description": "Course days or String describing the frequency/recurrence of the course"
        },
        "courseVenue": {
          "type": "string",
          "description": "Facility where the course will be taught"
        },
        "flyerURL": {
          "type": "string",
          "description": "URL of the course's flyer"
        },
        "imageURL": {
          "type": "string",
          "description": "URL of the course's image"
        },
        "slots": {
          "type": "integer",
          "description": "Class size or total number of slots in the course"
        },
        "courseRemarks": {
          "type": "string",
          "description": "Any additional notes or remarks about the course"
        },
        "teachers": {
          "description": "List of teacher (or coordinator) ids of the course",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "description": "List of tags associated with the course",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "RetrieveTeachersListResponse": {
      "description": "This is the schema of response payload when a list of teacher information is requested",
      "properties": {
        "teachers": {
          "type": "array",
          "description": "List of Teachers",
          "items": {
            "$ref": "#/definitions/TeacherObject"
          }
        }
      }
    },
    "TeacherObject": {
      "description": "Teacher Object",
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountObject"
        },
        "salutation": {
          "type": "string",
          "description": "Salutation or title. For e.g. Mrs, Dr, Shri, Pandit, etc."
        },
        "profilePictureURL": {
          "type": "string",
          "description": "URL of the teachers profile picture"
        },
        "skillSet": {
          "description": "Teacher's skill set",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indemnitySigned": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher has signed an indemnity"
        },
        "backgroundVerified": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher's background check has been complete"
        },
        "identityVerified": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher's identity verified"
        }
      }
    },

    "RetrieveIndemnitiesListResponse": {
      "description": "This is the schema of response payload when a list of indemnity information is requested",
      "properties": {
        "indemnities": {
          "type": "array",
          "description": "List of Indemnities",
          "items": {
            "$ref": "#/definitions/IndemnityObject"
          }
        }
      }
    },
    "IndemnityObject": {
      "description": "Indemnity Object",
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountObject"
        },
        "signedFor": {
          "$ref": "#/definitions/NameObject"
        },
        "signedBy": {
          "$ref": "#/definitions/NameObject"
        },
        "signedOn": {
          "type": "string",
          "description": "Datetime when the indemnity was signed in ISO 8612 format. For e.g. 2018-07-10T07:51:25+00:00"
        },
        "indemnityForm": {
          "$ref": "#/definitions/IndemnityFormObject"
        }
      }
    },

    "RetrieveAccountsListResponse": {
      "description": "This is the schema of response payload when an account's information is requested",
      "properties": {
        "accounts": {
          "type": "array",
          "description": "List of Accounts",
          "items": {
            "$ref": "#/definitions/AccountObject"
          }
        }
      }
    },
    "AccountObject": {
      "description": "Devotee Account Object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Unique userName of the devotee"
        },
        "name": {
          "$ref": "#/definitions/NameObject"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number associated with the devotee's account"
        },
        "email": {
          "type": "string",
          "description": "Email Id associated with the devotee's account"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth of the Devotee in the format MM-DD"
        },
        "familyMembers": {
          "type": "array",
          "description": "List of family Members",
          "items": {
            "$ref": "#/definitions/FamilyMember"
          }
        },
        "roles": {
          "type": "array",
          "description": "List of roles",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "RetrieveEnrollmentsListResponse": {
      "description": "This is the schema of response payload when a list of indemnity information is requested",
      "properties": {
        "enrollment": {
          "type": "array",
          "description": "List of Enrollments",
          "items": {
            "$ref": "#/definitions/EnrollmentObject"
          }
        }
      }
    },
    "EnrollmentObject": {
      "description": "Enrollment Object",
      "properties": {
        "enrollmentId": {
          "type": "string",
          "description": "Unique enrollment id"
        },
        "account": {
          "$ref": "#/definitions/AccountObject"
        },
        "participantName": {
          "$ref": "#/definitions/NameObject"
        },
        "familyMemberId": {
          "type": "string",
          "description": "Identifier of the Family Member"
        },
        "isParticipantUnder18": {
          "type": "boolean",
          "description": "true id participant age is under 18 else false"
        },
        "indemnityForm": {
          "$ref": "#/definitions/IndemnityObject"
        }
      }
    },

    "NameObject": {
      "description": "Name Object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of teacher"
        },
        "middleName": {
          "type": "string",
          "description": "Middle name of teacher"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of teacher"
        }
      }
    },
    "IndemnityFormObject": {
      "description": "Indemnity Form Object",
      "properties": {
        "indemnityFormId": {
          "type": "string",
          "description": "URL of the indemnity template"
        },
        "templateURL": {
          "type": "string",
          "description": "URL of the indemnity template"
        },
        "indemnityFormTitle": {
          "type": "string",
          "description": "Title of the indemnity Form"
        },
        "indemnityFormVersion": {
          "type": "string",
          "description": "Version of the indemnity Form"
        }
      }
    },
    "FamilyMember": {
      "description": "Devotee Object",
      "properties": {
        "name": {
          "$ref": "#/definitions/NameObject"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth of the Devotee in the format MM-DD"
        }
      }
    }
  },
  "parameters": {
    "Content-Type": {
      "name": "Content-Type",
      "in": "header",
      "description": "The MediaType of the request content",
      "required": true,
      "type": "string",
      "default": "application/json"
    },
    "Accept": {
      "name": "Accept",
      "in": "header",
      "description": "The MediaType of the response content",
      "required": true,
      "type": "string",
      "default": "application/json"
    },
    "User-Name": {
      "name": "User-Name",
      "in": "header",
      "description": "Unique identifier of the devotee's account",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "400ErrorResponse": {
      "description": "Bad request - some of the input parameters are incorrect or invalid",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "403ErrorResponse": {
      "description": "Forbidden - the devotee does not have permissions to call this endpoint",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404ErrorResponse": {
      "description": "Resource Not Found",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500ErrorResponse": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}
